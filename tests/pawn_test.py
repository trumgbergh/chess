from chess.piece import Pawn

test_boards = [
    [
        [(1, 0), (1, 8), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 8), (0, 0)],
        [(1, 1), (1, 9), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 9), (0, 1)],
        [(1, 2), (1, 10), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 10), (0, 2)],
        [(1, 3), (1, 11), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 11), (0, 3)],
        [(1, 4), (1, 12), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 12), (0, 4)],
        [(1, 5), (1, 13), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 13), (0, 5)],
        [(1, 6), (1, 14), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 14), (0, 6)],
        [(1, 7), (1, 15), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 15), (0, 7)],
    ]
]


def test_pawn_move_1_no_obs():
    p = Pawn((3, 6), "white")
    board = nx_cord2D = (3, 5)
    assert p.is_valid_move(nx_cord2D, board) is True


def test_pawn_move_2_no_obs():
    p = Pawn((3, 6), "white")
    board = [
        [(1, 0), (1, 8), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 8), (0, 0)],
        [(1, 1), (1, 9), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 9), (0, 1)],
        [(1, 2), (1, 10), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 10), (0, 2)],
        [(1, 3), (1, 11), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 11), (0, 3)],
        [(1, 4), (1, 12), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 12), (0, 4)],
        [(1, 5), (1, 13), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 13), (0, 5)],
        [(1, 6), (1, 14), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 14), (0, 6)],
        [(1, 7), (1, 15), (-1, -1), (-1, -1), (-1, -1), (-1, -1), (0, 15), (0, 7)],
    ]
    nx_cord2D = (3, 4)
    assert p.is_valid_move(nx_cord2D, board) is True
